<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<!-- By default, only the Clean and Build commands use this build script. -->
<!-- Commands such as Run, Debug, and Test only use this build script if -->
<!-- the Compile on Save feature is turned off for the project. -->
<!-- You can turn off the Compile on Save (or Deploy on Save) setting -->
<!-- in the project's Project Properties dialog box.-->
<project name="NeuGenJava" default="default" basedir=".">
    <description>Builds, tests, and runs the project NeuGen.</description>

    <import file="nbproject/build-impl.xml"/>
    <import file="nbproject/profiler-build-impl.xml"/>
    <import file="nbproject/profiler-build-impl.xml"/>    

    <property name="lib.dir" value="libs/" />
    <property name="dist.lib.dir" value="dist/"/>
    <property name="mainclass" value="org.neugen.gui.NeuGenApp"/>
    <property name="release.version" value="2.0"/>
    <property name="release.name" value="NeuGen"/>
    <property name="rls.dir" value="releases/${release.version}/"/>
    <property name="icon.dir" value="icon/"/>
    <property name="deploy.dir" value="deploy"/>
    <property name="rls.name" value="${release.name} ${release.version}"/>
    <property name="rls.helper.dir" value="rls/"/>
    <property name="resources.dir" value = "src/org/neugen/resources/"/>

    <!--
    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="NeuGenJava-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->

<!--    <target name= "-post-jar" description="copy java3d lib and log4j-3.properties to dist">
         copy java3d lib for linux 64 bit to new dir 
        <copy todir="dist/lib/j3d-1_5_2-linux-amd64">
            <fileset dir="libs/j3d/j3d-1_5_2-linux-amd64"></fileset>
        </copy>
         copy java3d lib for linux 32 bit to new dir 
        <copy todir="dist/lib/j3d-1_5_2-linux-i586">
            <fileset dir="libs/j3d/j3d-1_5_2-linux-i586"></fileset>
        </copy>
         copy java3d lib for win 64 bit to new dir.. 
        <copy todir="dist/lib/j3d-1_5_2-windows-amd64">
            <fileset dir="libs/j3d/j3d-1_5_2-windows-amd64"></fileset>
        </copy>
         copy j3d lib for win 32 
        <copy todir="dist/lib/j3d-1_5_2-windows-i586">
            <fileset dir="libs/j3d/j3d-1_5_2-windows-i586"></fileset>
        </copy>

         copy j3d lib for macosx 
        <copy todir="dist/lib/j3d-1_5_2-macosx">
            <fileset dir="libs/j3d/j3d-1_5_2-macosx"></fileset>
        </copy>

        <copy todir="dist/config">
            <fileset dir="config"></fileset>
        </copy>

	    <copy file="log4j-3.properties" todir="dist"></copy>
	    <copy file="libs/license/LICENSE-Java3D-v1_5_2.txt" todir="dist/lib"></copy>
	    <copy file="docs/LICENSE-NeuGen-v1_7_1.txt" todir="dist"></copy>
	    <copy file="libs/license/log4j-LICENSE" todir="dist/lib"></copy>
	    <copy file="libs/license/xpp3-license.txt" todir="dist/lib"></copy>
	    <copy file="libs/license/xstream-LICENSE.txt" todir="dist/lib"></copy>
	    <copy file="libs/license/looks-LICENSE.txt" todir="dist/lib"></copy>
	</target>-->

	<!-- copy all dependencies in one jar (TODO add release target=win, mac or linux) -->
	<target name="copy-dependencies">
		<mkdir dir="${dist.lib.dir}" />
		<jar jarfile="${dist.lib.dir}/dependencies-all.jar">
			<zipgroupfileset dir="${lib.dir}">
				<include name="**/*.jar" />
			</zipgroupfileset>
		</jar>
	</target>

	<!-- creates a fat jar with mainclass $mainclass and exclude all other main classes -->
	<target name="release" depends="clean, compile, copy-dependencies">
		<jar destfile="${dist.lib.dir}/NeuGen.jar" basedir="build/classes/">
			<manifest>
				<attribute name="Main-Class" value="$mainclass$" />
			</manifest>
			<zipfileset src="${dist.lib.dir}/dependencies-all.jar" 
				    excludes="META-INF/*.SF" />
			<fileset dir="${resources.dir}" />
		</jar>

		<mkdir dir="${rls.dir}" />
		<copy 
			file="${dist.lib.dir}/NeuGen.jar"
			todir="${rls.dir}/"/>

		<copy todir="${rls.dir}">
			<fileset dir="${rls.helper.dir}"/>
		</copy>

		<mkdir dir="${deploy.dir}" />
		<zip destfile="${deploy.dir}/${rls.name}.zip" basedir="${rls.dir}" />

	</target>

	<!-- bundles the app for osx -->
	<taskdef name="bundleapp"
		 classname="com.oracle.appbundler.AppBundlerTask"   
		 classpath="libs/appbundler-1.0.jar" />

	<!-- TODO: probably we should use $JAVA_HOME below, not hardcoded path! -->
	<property environment="env" />
 
	<target name="bundle-NeuGen">
		<bundleapp outputdirectory="dist"
			   name="NeuGen"
			   displayname="NeuGen"
			   identifier="NeuGen"
			   mainclassname="org.neugen.gui.NeuGenApp">
			<runtime dir="/Library/Java/JavaVirtualMachines/jdk1.7.0_55.jdk/Contents/Home/" />
			<classpath file="${rls.dir}/NeuGen.jar" />
		</bundleapp>

		<!-- add icon -->
		<echo message="copy icon" />
		<copy 
			file="${icon.dir}/neugen.icns"
			tofile="${dist.lib.dir}/NeuGen.app/Contents/Resources/GenericApp.icns"
			overwrite="true"/>

		<!-- bundle to pkg for osx -->
		<!--
		<exec executable="projectbuild" os="Mac OS X"> 
			<arg value="\-\-component ${rls.name} /Applications ${release.name}-${release-version}.pkg">
		<exec> 
		-->
		
	</target>
	<!-- after bounding call productbuild to build an installer: see http://centerkey.com/mac/java/ 
	and see also http://docs.oracle.com/javase/7/docs/technotes/guides/jweb/packagingAppsForMac.html -->

	<!-- post-jar task -->
	<target name="-post-jar">
		<!-- add additional resources directory -->
		<jar destfile="dist/NeuGen.jar" update="true">
			<fileset dir="${resources.dir}">
				<include name="**/*"/>
			</fileset>
		</jar>
		<!-- Change the value of this property to be the name of your JAR,
		minus the .jar extension. It should not have spaces.
		<property name="store.jar.name" value="MyJarName"/>
		-->
		<property name="store.jar.name" value="${application.title}"/>

		<!-- don't edit below this line -->
		<property name="store.dir" value="dist-single"/>
		<property name="store.jar" value="${store.dir}/${store.jar.name}.jar"/>

		<echo message="Packaging ${application.title} into a single JAR at ${store.jar}"/>

		<delete dir="${store.dir}"/>
		<mkdir dir="${store.dir}"/>

		<jar destfile="${store.dir}/temp_final.jar" filesetmanifest="skip">
			<zipgroupfileset dir="dist"
					 includes="*.jar"
					 excludes="VRL.jar"/>
			<zipgroupfileset dir="dist/lib"
					 includes="*.jar"
					 excludes="VRL.jar"/>

			<manifest>
				<attribute name="Main-Class" value="${main.class}"/>
			</manifest>
		</jar>

		<zip destfile="${store.jar}">
			<zipfileset src="${store.dir}/temp_final.jar"
				    excludes="META-INF/*.SF, META-INF/*.DSA, META-INF/*.RSA"/>
		</zip>

		<delete file="${store.dir}/temp_final.jar"/>

		<!--Copy VRL.jar to dist and delete lib folder-->
		<copy todir="dist">
			<fileset dir="dist-single" includes="**/*"/>
		</copy>

		<delete dir="dist-single"/>
		<delete dir="dist/lib"/>
	</target>

	<!-- install VRL plugin target -->
	<target name="installVRLPlugin">
		<property file="build.properties"/>
		<echo message="Copying ${dist.jar} to ${vrl.dir}/plugin-updates"/>
		<copy 
			file="${dist.jar}" 
			todir="${vrl.dir}/plugin-updates"/>
	</target>
</project>
